{"version":3,"sources":["Stores/TasksStore.js","Components/Task.js","Components/TodayList.js","Components/FutureList.js","Components/CreateTaskForm.js","App.js","serviceWorker.js","index.js"],"names":["TasksStore","idCounter","labelOptions","pendingTasks","todayTasks","futureTasks","doneTasks","addTask","title","details","due","labels","newTask","id","push","isAfter","moment","tasks","updateLocalStorage","deleteTask","taskId","filter","item","checkTask","task","find","JSON","stringify","done","localStorage","setItem","retrieveFromLocalStorage","parse","getItem","forEach","decorate","observable","tasksStore","Task","state","modal","toggleDeleteModal","props","setState","dueDate","this","length","map","label","pill","color","className","fromNow","modalStyle","size","position","isOpen","toggle","bind","titleClass","tag","icon","pull","onClick","outline","far","Component","observer","TodayList","key","md","FutureList","CreateTaskForm","toggleModal","cancelTask","labelSelect","value","action","options","type","onChange","e","target","placeholder","isMulti","defaultValue","momentObj","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c263cfaf.chunk.js","sourcesContent":["import { decorate, observable} from \"mobx\";\nimport moment from \"moment\";\n\n\nclass TasksStore {\n\n    idCounter = 1;\n    labelOptions = [\"New Feature\", \"Defect\",\"Invalid\",\"Emergency Repair\"];\n    pendingTasks = [];\n    todayTasks = [];\n    futureTasks = [];\n    doneTasks = [];\n\n\n    addTask = (title, details, due,labels) => {\n        let newTask = {\n            title: title,\n            details: details,\n            due: due,\n            labels: labels,\n            id: this.idCounter\n        };\n        this.idCounter++;\n        this.pendingTasks.push(newTask);\n        if (due && due.isAfter(moment(),\"day\")) {\n            let tasks = this.futureTasks;\n            tasks.push(newTask);\n            this.futureTasks = tasks\n        } else {\n            let tasks = this.todayTasks;\n            tasks.push(newTask);\n            this.todayTasks = tasks;\n        }\n        this.updateLocalStorage();\n    };\n\n    deleteTask = taskId => {\n        this.todayTasks = this.todayTasks.filter(item => item.id !== taskId);\n        this.futureTasks = this.futureTasks.filter(item => item.id !== taskId);\n        this.pendingTasks = this.pendingTasks.filter(item => item.id !== taskId);\n        this.updateLocalStorage();\n    };\n\n    checkTask = taskId => {\n        let task = this.pendingTasks.find(item => item.id === taskId);\n        this.pendingTasks = this.pendingTasks.filter (item => item.id !== taskId);\n        this.todayTasks = this.todayTasks.filter (item => item.id !== taskId);\n        this.futureTasks = this.futureTasks.filter(item => item.id !== taskId)\n\n        this.doneTasks.push(task);\n        this.updateLocalStorage();\n\n    }\n\n    updateLocalStorage = () => {\n        let tasks = JSON.stringify({\n            todayTasks: this.todayTasks,\n            futureTasks: this.futureTasks,\n            pendingTasks: this.pendingTasks,\n            done: this.doneTasks,\n            labels: this.labelOptions,\n            idCounter: this.idCounter\n        });\n        localStorage.setItem(\"tasks\",tasks);\n    }\n\n    retrieveFromLocalStorage = () => {\n        let tasks = JSON.parse(localStorage.getItem(\"tasks\"));\n        if (tasks)\n        {\n            tasks.todayTasks.forEach(task => {\n                if (task.due) task.due = moment(task.due);\n            });\n            tasks.futureTasks.forEach(task => {\n                if (task.due) task.due = moment (task.due)\n            });\n\n            tasks.pendingTasks.forEach(task => {\n               if (task.due)  task.due = moment (task.due)\n            });\n\n            this.todayTasks = tasks.todayTasks;\n            this.futureTasks = tasks.futureTasks;\n            this.pendingTasks = tasks.pendingTasks;\n            this.doneTasks = tasks.done;\n            this.labelOptions = tasks.labels;\n            this.idCounter = tasks.idCounter;\n        }\n    };\n\n}\n\ndecorate(TasksStore, {\n    todayTasks: observable,\n    futureTasks: observable\n});\n\nconst tasksStore = new TasksStore();\n\nexport default tasksStore;\n","import React, { Component } from \"react\";\nimport { observer} from \"mobx-react\";\nimport {\n    MDBBtn,\n    MDBCloseIcon,\n    MDBIcon,\n    MDBListGroupItem,\n    MDBModal,\n    MDBModalBody,\n    MDBModalFooter,\n    MDBModalHeader,\n    MDBBadge\n} from \"mdbreact\";\nimport tasksStore from \"../Stores/TasksStore\";\n\nclass Task extends Component {\n\n    state = {\n        modal:false\n    };\n\n    deleteTask = () => {\n        this.toggleDeleteModal();\n        tasksStore.deleteTask(this.props.task.id);\n    }\n\n    toggleDeleteModal = () => {\n        this.setState({modal: !this.state.modal });\n    }\n\n    checkTask = () => {\n        tasksStore.checkTask(this.props.task.id);\n    }\n\n    render() {\n        let labels;\n        if (this.props.task.labels && this.props.task.labels.length > 0) {\n            labels = this.props.task.labels.map(label => {\n                return (\n                    <MDBBadge pill color=\"primary\" className=\"mr-2\">\n                        {label.label}\n                    </MDBBadge>\n\n                );\n            });\n        }\n\n        let dueDate;\n      if (this.props.task.due)\n          dueDate = <span>- {this.props.task.due.fromNow()}</span>;\n      return (\n          <MDBListGroupItem>\n              <MDBModal\n                modalStyle=\"danger\"\n                className=\"text-white\"\n                size=\"sm\"\n                position=\"top\"\n                isOpen={this.state.modal}\n                toggle = {this.toggleDeleteModal.bind(this)}\n              >\n                  <MDBModalHeader\n                  className=\"text-center\"\n                  titleClass=\"w-100\"\n                  tag=\"p\"\n                  toggle={this.toggleDeleteModal.bind(this)}\n                  >\n                  Are you sure?\n                  </MDBModalHeader>\n                  <MDBModalBody className=\"text-center\">\n                      <MDBIcon icon=\"times\" size=\"4x\" pull className=\"animated data\" />\n                  </MDBModalBody>\n                  <MDBModalFooter className=\"justify-content-center\">\n                      <MDBBtn color=\"danger\" onClick={this.deleteTask.bind(this)}>Yes</MDBBtn>\n                      <MDBBtn color=\"danger\" outline onClick={this.toggleDeleteModal.bind(this)}>No</MDBBtn>\n                  </MDBModalFooter>\n              </MDBModal>\n              <div className=\"d-flex justify-content-between\">\n                  <div className=\"d-flex align-items-start flex-column\">\n                      <div className=\"d-flex justify-content-start\">\n                          <div className=\"align-self-center\">\n                              <MDBIcon\n                                  far\n                                  icon=\"square\"\n                                  size=\"2x\"\n                                  onClick={this.checkTask.bind(this)}\n                                  />\n                          </div>\n                      </div>\n                      <div className=\"flex-grow-1 p-3 text-wrap\">\n                          <h5 className=\"mb-1\"> {this.props.task.title}</h5>\n                      </div>\n                  </div>\n                  <div>\n                      <MDBCloseIcon\n                          className=\"ml-auto\"\n                          onClick={this.toggleDeleteModal.bind(this)}\n                      />\n                  </div>\n              </div>\n              <p className=\"mb-1\">{this.props.task.details}</p>\n              <p className=\"mb-1\">{dueDate}</p>\n              <div className=\"flex-row mb-2\">{labels}</div>\n          </MDBListGroupItem>\n      );\n    }\n}\n\nexport default observer(Task);\n","import React, { Component } from \"react\";\nimport Task from \"./Task\";\nimport tasksStore from \"../Stores/TasksStore\";\nimport { observer} from \"mobx-react\";\nimport {MDBCol, MDBListGroup} from \"mdbreact\";\n\nclass TodayList extends Component {\n    render() {\n        let tasks = tasksStore.todayTasks.map(task => <Task task={task} key={task.title} />);\n        return (\n            <MDBCol md=\"4\">\n                <h3>In Progress</h3>\n                <MDBListGroup>{tasks}</MDBListGroup>\n            </MDBCol>\n        );\n    }\n      \n}\n\nexport default observer(TodayList);\n","import React, { Component } from \"react\";\nimport Task from \"./Task\";\nimport tasksStore from \"../Stores/TasksStore\";\nimport { observer} from \"mobx-react\";\nimport {MDBCol, MDBListGroup} from \"mdbreact\";\n\n\nclass FutureList extends Component {\n    render() {\n        let tasks =tasksStore.futureTasks.map(task => <Task task={task} key={task.title} />);\n        return (\n            <MDBCol md=\"4\">\n                <h3>Backlog</h3>\n                <MDBListGroup>{tasks}</MDBListGroup>\n            </MDBCol>\n        );\n    }\n\n}\n\nexport default observer(FutureList);\n","import React, { Component } from \"react\";\nimport Datetime from \"react-datetime\";\nimport \"../DatetimePicker.css\";\nimport tasksStore from \"../Stores/TasksStore\";\nimport { observer} from \"mobx-react\";\nimport {MDBBtn, MDBInput, MDBModal, MDBModalBody, MDBModalFooter, MDBModalHeader, MDBRow} from \"mdbreact\";\nimport Select from \"react-select\";\n\nclass CreateTaskForm extends Component {\n  state = {\n    title: \"\",\n    details: \"\",\n    due: \"\",\n    labels: [],\n    modal: false\n  };\n\n  addTask = () => {\n    if (this.state.title) {\n      tasksStore.addTask(\n          this.state.title,\n          this.state.details,\n          this.state.due,\n          this.state.labels\n      );\n      this.setState({ title: \"\", details: \"\", due:\"\", labels:[] });\n      this.toggleModal();\n    }\n  };\n\n  toggleModal = () => {\n      this.setState({modal: !this.state.modal});\n  };\n\n  cancelTask = () => {\n    this.setState({title: \"\", details: \"\", due: \"\" });\n    this.toggleModal();\n  };\n\n  labelSelect = (value, action) => {\n      this.setState({labels: value});\n  }\n\n\n  render() {\n      let options = tasksStore.labelOptions.map(label => {\n          return { value: label, label:label };\n      });\n\n    return (\n        <MDBRow>\n            <MDBBtn outline color=\"primary\" onClick={this.toggleModal.bind(this)}>\n               New Task\n            </MDBBtn>\n            <MDBModal\n                isOpen={this.state.modal}\n                toggle={this.toggleModal.bind(this)}\n                size=\"sm\"\n            >\n                <MDBModalHeader>Add a New Task</MDBModalHeader>\n                <MDBModalBody>\n                  <MDBInput\n                      type=\"text\"\n                      label=\"Task\"\n                      onChange={e => this.setState({ title: e.target.value })}\n                      value={this.state.title}\n                      placeholder=\"Task\"\n                  />\n                    <MDBInput\n                        type=\"textarea\"\n                        placeholder=\"Optional details\"\n                        label=\"Details (Optional)\"\n                        value={this.state.details}\n                        onChange={e =>  this.setState({ details: e.target.value }) }\n                    />\n                    <Select\n                        options={options}\n                        isMulti\n                        value={this.state.labels}\n                        onChange={this.labelSelect.bind(this)}\n                    />\n                    <Datetime\n                        defaultValue=\"Optional Due Date\"\n                        value={this.state.due}\n                        onChange={momentObj => {\n                            this.setState({ due: momentObj });\n                        }}\n                    />\n                </MDBModalBody>\n                <MDBModalFooter>\n                    <MDBBtn color=\"secondary\" size=\"sm\" onClick={this.cancelTask.bind(this)}>\n                       Cancel\n                    </MDBBtn>\n                    <MDBBtn color=\"primary\" size=\"sm\" onClick={this.addTask.bind(this)}>\n                        Add Task\n                    </MDBBtn>\n                </MDBModalFooter>\n            </MDBModal>\n        </MDBRow>\n      );\n\n  }\n}\n\nexport default observer(CreateTaskForm);\n","import React, { Component } from \"react\";\nimport TodayList from \"./Components/TodayList\";\nimport FutureList from \"./Components/FutureList\";\nimport CreateTaskForm from \"./Components/CreateTaskForm\";\nimport tasksStore from \"./Stores/TasksStore\";\nimport {MDBContainer, MDBRow} from \"mdbreact\";\n\nclass App extends Component {\n\n  componentDidMount() {\n    tasksStore.retrieveFromLocalStorage();\n  }\n\n  \n  render() {  \n  \n    return (<MDBContainer>\n        <CreateTaskForm />\n        <MDBRow>\n            <FutureList/>\n            <TodayList/>\n        </MDBRow>\n      </MDBContainer>\n    );\n}\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n"," import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\nimport \"mdbreact/dist/css/mdb.css\";\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}