{"version":3,"sources":["Components/User/Register/index.js","Components/Constants/routes.js","Stores/TasksStore.js","Components/CreateTaskForm.js","Components/Task.js","Components/TodayList.js","Components/TomorrowList.js","Components/FutureList.js","Components/CompletedList.js","Components/Dashboard.js","Components/Common/Header.js","Components/Common/Footer.js","Components/User/Login/index.js","Components/User/AccountPage.js","App.js","serviceWorker.js","index.js"],"names":["RegisterPage","state","fname","email","email_confirm","password","submitHandler","event","preventDefault","target","className","changeHandler","setState","name","value","md","label","icon","group","type","validate","error","success","required","color","Component","observer","REGISTER","process","LOGIN","ACCOUNT","TasksStore","idCounter","labelOptions","pendingTasks","todayTasks","futureTasks","tomorrowTasks","doneTasks","addTask","title","details","due","labels","newTask","id","push","console","log","diff","moment","tasks","isAfter","updateLocalStorage","deleteTask","taskId","filter","item","checkTask","task","find","JSON","stringify","localStorage","setItem","retrieveFromLocalStorage","parse","getItem","forEach","decorate","observable","tasksStore","CreateTaskForm","modal","toggleModal","cancelTask","labelSelect","action","options","map","outline","onClick","this","bind","isOpen","toggle","size","onChange","e","placeholder","isMulti","defaultValue","momentObj","Task","toggleDeleteModal","props","dueDate","length","pill","fromNow","modalStyle","position","titleClass","tag","far","TodayList","key","TomorrowList","FutureList","CompletedList","Dashboard","Header","toggleCollapse","dark","expand","src","width","height","alt","navbar","left","active","to","ROUTES","nav","caret","href","right","Footer","fluid","Date","getFullYear","LoginPage","AccountPage","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.82e24472.chunk.js","sourcesContent":["import React, {Component} from \"react\";\nimport {observer} from \"mobx-react\";\nimport {MDBBtn, MDBCol, MDBContainer, MDBInput, MDBRow} from \"mdbreact\";\n\n\nclass RegisterPage extends Component {\n\n    state = {\n        fname: \"\",\n        email: \"\",\n        email_confirm:\"\",\n        password:\"\"\n    }\n\n    submitHandler = event => {\n        event.preventDefault();\n        event.target.className += \" was-validated\";\n    };\n\n    changeHandler = event => {\n        this.setState({ [event.target.name]: event.target.value });\n    };\n\n    render() {\n        return (\n            <MDBContainer className=\"mt-5\">\n                <MDBRow>\n                    <MDBCol md=\"6\">\n                        <form>\n                            <p className=\"h3 text-center mb-4\">Register</p>\n                            <div className=\"grey-text\">\n                                <MDBInput\n                                    label=\"Your name\"\n                                    icon=\"user\"\n                                    group type=\"text\"\n                                    validate error=\"wrong\"\n                                    success=\"right\"\n                                    name=\"fname\"\n                                    required\n                                />\n                                <MDBInput\n                                    label=\"Your email\"\n                                    icon=\"envelope\"\n                                    group type=\"email\"\n                                    validate\n                                    error=\"wrong\"\n                                    success=\"right\"\n                                    name=\"email\"\n                                    required\n                                />\n                                <MDBInput\n                                    label=\"Confirm your email\"\n                                    icon=\"exclamation-triangle\"\n                                    group type=\"email\"\n                                    validate\n                                    error=\"wrong\"\n                                    success=\"right\"\n                                    name=\"email_confirm\"\n                                    required\n                                />\n                                <MDBInput\n                                    label=\"Your password\"\n                                    icon=\"lock\"\n                                    group type=\"password\"\n                                    validate\n                                    name=\"password\"\n                                    required\n\n                                />\n                            </div>\n                            <div className=\"text-center\">\n                                <MDBBtn color=\"primary\" type=\"submit\">Register</MDBBtn>\n                            </div>\n                        </form>\n                    </MDBCol>\n                </MDBRow>\n            </MDBContainer>\n        );\n    }\n\n}\n\nexport default observer(RegisterPage);","export const REGISTER = process.env.REACT_APP_URL + '/register';\nexport const LOGIN = process.env.REACT_APP_URL + '/login';\nexport const ACCOUNT = process.env.REACT_APP_URL + '/account';\nexport const DASHBOARD = process.env.REACT_APP_URL + '/';\n","import { decorate, observable} from \"mobx\";\nimport moment from \"moment\";\n\n\nclass TasksStore {\n\n    idCounter = 1;\n    labelOptions = [\"New Feature\", \"Defect\",\"Invalid\",\"Emergency Repair\"];\n    pendingTasks = [];\n    todayTasks = [];\n    futureTasks = [];\n    tomorrowTasks = [];\n    doneTasks = [];\n\n\n    addTask = (title, details, due,labels) => {\n        let newTask = {\n            title: title,\n            details: details,\n            due: due,\n            labels: labels,\n            id: this.idCounter\n        };\n        this.idCounter++;\n        this.pendingTasks.push(newTask);\n        console.log(due.diff(moment(),\"day\"));\n        if (due &&\n            (due.diff(moment(), 'day') === 1)\n        ) {\n            let tasks = this.tomorrowTasks;\n            tasks.push(newTask);\n            this.tomorrowTasks = tasks\n\n        } else if (due && due.isAfter(moment(),\"day\")) {\n            let tasks = this.futureTasks;\n            tasks.push(newTask);\n            this.futureTasks = tasks\n\n        } else {\n            let tasks = this.todayTasks;\n            tasks.push(newTask);\n            this.todayTasks = tasks;\n        }\n        this.updateLocalStorage();\n    };\n\n    deleteTask = taskId => {\n        this.todayTasks = this.todayTasks.filter(item => item.id !== taskId);\n        this.tomorrowTasks = this.tomorrowTasks.filter(item => item.id !== taskId);\n        this.futureTasks = this.futureTasks.filter(item => item.id !== taskId);\n        this.pendingTasks = this.pendingTasks.filter(item => item.id !== taskId);\n        this.doneTasks = this.doneTasks.filter(item => item.id !== taskId);\n        this.updateLocalStorage();\n    };\n\n    checkTask = taskId => {\n        let task = this.pendingTasks.find(item => item.id === taskId);\n        this.pendingTasks = this.pendingTasks.filter (item => item.id !== taskId);\n        this.tomorrowTasks = this.tomorrowTasks.filter(item => item.id !== taskId);\n        this.todayTasks = this.todayTasks.filter (item => item.id !== taskId);\n        this.futureTasks = this.futureTasks.filter(item => item.id !== taskId)\n        this.doneTasks.push(task);\n        this.updateLocalStorage();\n\n    }\n\n    updateLocalStorage = () => {\n        let tasks = JSON.stringify({\n            todayTasks: this.todayTasks,\n            tomorrowTasks: this.tomorrowTasks,\n            futureTasks: this.futureTasks,\n            pendingTasks: this.pendingTasks,\n            doneTasks: this.doneTasks,\n            labels: this.labelOptions,\n            idCounter: this.idCounter\n        });\n        localStorage.setItem(\"tasks\",tasks);\n    }\n\n    retrieveFromLocalStorage = () => {\n        let tasks = JSON.parse(localStorage.getItem(\"tasks\"));\n        if (tasks)\n        {\n            tasks.todayTasks.forEach(task => {\n                if (task.due) task.due = moment(task.due);\n            });\n            tasks.tomorrowTasks.forEach(task => {\n                if (task.due) task.due = moment(task.due);\n            });\n            tasks.futureTasks.forEach(task => {\n                if (task.due) task.due = moment (task.due)\n            });\n            tasks.pendingTasks.forEach(task => {\n               if (task.due)  task.due = moment (task.due)\n            });\n            tasks.doneTasks.forEach(task => {\n                if (task.due)  task.due = moment (task.due)\n            });\n\n            this.todayTasks = tasks.todayTasks;\n            this.tomorrowTasks = tasks.tomorrowTasks;\n            this.futureTasks = tasks.futureTasks;\n            this.pendingTasks = tasks.pendingTasks;\n            this.doneTasks = tasks.doneTasks;\n            this.labelOptions = tasks.labels;\n            this.idCounter = tasks.idCounter;\n        }\n    };\n\n}\n\ndecorate(TasksStore, {\n    todayTasks: observable,\n    futureTasks: observable,\n    doneTasks: observable,\n    tomorrowTasks: observable\n});\n\nconst tasksStore = new TasksStore();\n\nexport default tasksStore;\n","import React, { Component } from \"react\";\nimport Datetime from \"react-datetime\";\nimport \"../DatetimePicker.css\";\nimport tasksStore from \"../Stores/TasksStore\";\nimport { observer} from \"mobx-react\";\nimport {MDBBtn, MDBInput, MDBModal, MDBModalBody, MDBModalFooter, MDBModalHeader, MDBRow} from \"mdbreact\";\nimport Select from \"react-select\";\n\nclass CreateTaskForm extends Component {\n  state = {\n    title: \"\",\n    details: \"\",\n    due: \"\",\n    labels: [],\n    modal: false\n  };\n\n  addTask = () => {\n    if (this.state.title) {\n      tasksStore.addTask(\n          this.state.title,\n          this.state.details,\n          this.state.due,\n          this.state.labels\n      );\n      this.setState({ title: \"\", details: \"\", due:\"\", labels:[] });\n      this.toggleModal();\n    }\n  };\n\n  toggleModal = () => {\n      this.setState({modal: !this.state.modal});\n  };\n\n  cancelTask = () => {\n    this.setState({title: \"\", details: \"\", due: \"\" });\n    this.toggleModal();\n  };\n\n  labelSelect = (value, action) => {\n      this.setState({labels: value});\n  }\n\n\n  render() {\n      let options = tasksStore.labelOptions.map(label => {\n          return { value: label, label:label };\n      });\n\n    return (\n        <MDBRow className=\"mt-3 mb-3\">\n            <MDBBtn outline color=\"primary\" onClick={this.toggleModal.bind(this)}>\n                New Task\n            </MDBBtn>\n            <MDBModal\n                isOpen={this.state.modal}\n                toggle={this.toggleModal.bind(this)}\n                size=\"sm\"\n            >\n                <MDBModalHeader>Add a New Task</MDBModalHeader>\n                <MDBModalBody>\n                  <MDBInput\n                      type=\"text\"\n                      label=\"Task\"\n                      onChange={e => this.setState({ title: e.target.value })}\n                      value={this.state.title}\n                      placeholder=\"Task\"\n                  />\n                    <MDBInput\n                        type=\"textarea\"\n                        placeholder=\"Optional details\"\n                        label=\"Details (Optional)\"\n                        value={this.state.details}\n                        onChange={e =>  this.setState({ details: e.target.value }) }\n                    />\n                    <Select\n                        options={options}\n                        isMulti\n                        value={this.state.labels}\n                        onChange={this.labelSelect.bind(this)}\n                    />\n                    <Datetime className=\"mt-3\"\n                        defaultValue=\"Optional Due Date\"\n                        value={this.state.due}\n                        onChange={momentObj => {\n                            this.setState({ due: momentObj });\n                        }}\n                    />\n                </MDBModalBody>\n                <MDBModalFooter>\n                    <MDBBtn color=\"secondary\" size=\"sm\" onClick={this.cancelTask.bind(this)}>\n                       Cancel\n                    </MDBBtn>\n                    <MDBBtn color=\"primary\" size=\"sm\" onClick={this.addTask.bind(this)}>\n                        Add Task\n                    </MDBBtn>\n                </MDBModalFooter>\n            </MDBModal>\n        </MDBRow>\n      );\n\n  }\n}\n\nexport default observer(CreateTaskForm);\n","import React, { Component } from \"react\";\nimport { observer} from \"mobx-react\";\nimport {\n    MDBBtn,\n    MDBCloseIcon,\n    MDBIcon,\n    MDBListGroupItem,\n    MDBModal,\n    MDBModalBody,\n    MDBModalFooter,\n    MDBModalHeader,\n    MDBBadge\n} from \"mdbreact\";\nimport tasksStore from \"../Stores/TasksStore\";\n\nclass Task extends Component {\n\n    state = {\n        modal:false\n    };\n\n    deleteTask = () => {\n        this.toggleDeleteModal();\n        tasksStore.deleteTask(this.props.task.id);\n    }\n\n    toggleDeleteModal = () => {\n        this.setState({modal: !this.state.modal });\n    }\n\n    checkTask = () => {\n        tasksStore.checkTask(this.props.task.id);\n    }\n\n    render() {\n        let labels;\n        if (this.props.task.labels && this.props.task.labels.length > 0) {\n            labels = this.props.task.labels.map(label => {\n                return (\n                    <MDBBadge pill color=\"primary\" className=\"mr-2\">\n                        {label.label}\n                    </MDBBadge>\n\n                );\n            });\n        }\n\n        let dueDate;\n      if (this.props.task.due)\n          dueDate = <span className=\"light-blue-text\"> {this.props.task.due.fromNow()}</span>;\n      return (\n          <MDBListGroupItem className=\"rgba(3, 169, 244, 0.1) rgba-blue-slight\" color=\"primary-color-dark\" >\n              <MDBModal\n                modalStyle=\"danger\"\n                className=\"text-white\"\n                size=\"sm\"\n                position=\"top\"\n                isOpen={this.state.modal}\n                toggle = {this.toggleDeleteModal.bind(this)}\n              >\n                  <MDBModalHeader\n                  className=\"text-center\"\n                  titleClass=\"w-100\"\n                  tag=\"p\"\n                  toggle={this.toggleDeleteModal.bind(this)}\n                  >\n                  Are you sure?\n                  </MDBModalHeader>\n                  <MDBModalBody className=\"text-center\">\n                      delete task - <strong>\"{this.props.task.title}\"</strong>\n                  </MDBModalBody>\n                  <MDBModalFooter className=\"justify-content-center\">\n                      <MDBBtn color=\"danger\" onClick={this.deleteTask.bind(this)}>Yes</MDBBtn>\n                      <MDBBtn color=\"danger\" outline onClick={this.toggleDeleteModal.bind(this)}>No</MDBBtn>\n                  </MDBModalFooter>\n              </MDBModal>\n              <div className=\"d-flex justify-content-between\">\n                  <div className=\"d-flex align-items-start flex-column\">\n                      <div className=\"d-flex justify-content-start\">\n                          <div className=\"align-self-center\">\n                              <MDBIcon\n                                  far\n                                  icon=\"square\"\n                                  size=\"2x\"\n                                  onClick={this.checkTask.bind(this)}\n                                  />\n                          </div>\n                      </div>\n                      <div className=\"flex-grow-1 pb-3 pt-3 text-wrap\">\n                          <h5 className=\"mb-1 blue-text\"><strong>{this.props.task.title}</strong></h5>\n                      </div>\n                  </div>\n                  <div>\n                      <MDBCloseIcon\n                          className=\"ml-auto\"\n                          onClick={this.toggleDeleteModal.bind(this)}\n                      />\n                  </div>\n              </div>\n              <p className=\"mb-1\">{this.props.task.details}</p>\n              <small className=\"mb-3 mt-3\">\n                  Due: {dueDate}\n              </small>\n              <div className=\"flex-row mb-2\">{labels}</div>\n          </MDBListGroupItem>\n      );\n    }\n}\n\nexport default observer(Task);\n","import React, { Component } from \"react\";\nimport Task from \"./Task\";\nimport tasksStore from \"../Stores/TasksStore\";\nimport { observer} from \"mobx-react\";\nimport {MDBCol, MDBListGroup} from \"mdbreact\";\n\nclass TodayList extends Component {\n    render() {\n        let tasks = tasksStore.todayTasks.map(task => <Task task={task} key={task.title} />);\n        return (\n            <MDBCol md=\"4\" className=\"mb-5\">\n                <h3 className=\"red-text\">Today's Deadline</h3>\n                <MDBListGroup>{tasks}</MDBListGroup>\n            </MDBCol>\n        );\n    }\n      \n}\n\nexport default observer(TodayList);\n","import React , {Component} from \"react\";\nimport { MDBListGroup} from \"mdbreact\";\nimport {observer} from \"mobx-react\";\nimport tasksStore from \"../Stores/TasksStore\";\nimport Task from \"./Task\";\n\nclass TomorrowList extends Component {\n    render() {\n        let tasks =tasksStore.tomorrowTasks.map(task => <Task task={task} key={task.title} />);\n        return (\n            <div className=\"mb-5\">\n                <h3>Tomorrow's Deadline</h3>\n                <MDBListGroup>{tasks}</MDBListGroup>\n            </div>\n        );\n    }\n}\n\nexport default observer(TomorrowList);","import React, { Component } from \"react\";\nimport Task from \"./Task\";\nimport tasksStore from \"../Stores/TasksStore\";\nimport { observer} from \"mobx-react\";\nimport {  MDBListGroup} from \"mdbreact\";\n\n\nclass FutureList extends Component {\n    render() {\n        let tasks =tasksStore.futureTasks.map(task => <Task task={task} key={task.title} />);\n        return (\n            <div className=\"mb-5\">\n                <h3>Future Deadline</h3>\n                <MDBListGroup>{tasks}</MDBListGroup>\n            </div>\n        );\n    }\n\n}\n\nexport default observer(FutureList);\n","import React, {Component} from \"react\";\nimport {MDBCol, MDBIcon, MDBListGroup} from \"mdbreact\";\nimport {observer} from \"mobx-react\";\nimport tasksStore from \"../Stores/TasksStore\";\nimport Task from \"./Task\";\n\nclass CompletedList extends Component {\n    render() {\n        let tasks =tasksStore.doneTasks.map(task => <Task task={task} key={task.title} />);\n        return(\n            <MDBCol md=\"4\" className=\"mb-5\">\n                <h3 className=\"success-text\">Completed <MDBIcon far icon=\"thumbs-up\" /></h3>\n                <MDBListGroup>{tasks}</MDBListGroup>\n            </MDBCol>\n\n        );\n    }\n}\n\nexport default observer(CompletedList);","import React, {Component} from \"react\";\nimport CreateTaskForm from \"./CreateTaskForm\";\nimport {MDBCol, MDBRow} from \"mdbreact\";\nimport TodayList from \"./TodayList\";\nimport TomorrowList from \"./TomorrowList\";\nimport FutureList from \"./FutureList\";\nimport CompletedList from \"./CompletedList\";\n\nimport tasksStore from \"../Stores/TasksStore\";\n\n\nclass Dashboard extends Component {\n\n    componentDidMount() {\n        tasksStore.retrieveFromLocalStorage();\n    }\n\n    render(){\n\n        return (\n                <div>\n                    <CreateTaskForm />\n                    <MDBRow>\n                        <TodayList/>\n                        <MDBCol>\n                            <TomorrowList />\n                            <FutureList/>\n                        </MDBCol>\n                        <CompletedList/>\n                    </MDBRow>\n                </div>\n        );\n\n    }\n\n}\n\nexport default Dashboard;","\nimport React, { Component } from \"react\";\nimport {observer} from \"mobx-react\";\nimport {\n    MDBCollapse,\n    MDBDropdown,\n    MDBDropdownItem, MDBDropdownMenu,\n    MDBDropdownToggle,\n    MDBNavbar,\n    MDBNavbarBrand,\n    MDBNavbarNav,\n    MDBNavbarToggler,\n    MDBNavItem,\n    MDBNavLink\n} from \"mdbreact\";\nimport * as ROUTES from '../Constants/routes'\nclass Header extends Component {\n\n    state = {\n        isOpen: false\n    };\n\n    toggleCollapse = () => {\n        this.setState({ isOpen: !this.state.isOpen });\n    }\n\n    render(){\n        return (\n            <MDBNavbar color=\"indigo\" dark expand=\"md\">\n                <MDBNavbarBrand>\n                    <img\n                        src=\"logo.png\"\n                        width=\"40\"\n                        height=\"40\"\n                        className=\"d-inline-block align-top\"\n                        alt=\"logo\"\n\n                    />\n                </MDBNavbarBrand>\n                <MDBNavbarToggler onClick={this.toggleCollapse} />\n                <MDBCollapse id=\"navbarCollapse3\" isOpen={this.state.isOpen} navbar>\n                    <MDBNavbarNav left>\n                        <MDBNavItem active>\n                            <MDBNavLink to={ROUTES.DASHBOARD}>Board</MDBNavLink>\n                        </MDBNavItem>\n                        <MDBNavItem>\n                            <MDBNavLink to={ROUTES.REGISTER}>Register</MDBNavLink>\n                        </MDBNavItem>\n                        <MDBNavItem>\n                            <MDBDropdown>\n                                <MDBDropdownToggle nav caret>\n                                    <span className={ROUTES.ACCOUNT}>Account</span>\n                                </MDBDropdownToggle>\n                                <MDBDropdownMenu>\n                                    <MDBDropdownItem href={ROUTES.LOGIN}>Login</MDBDropdownItem>\n                                    <MDBDropdownItem href={ROUTES.ACCOUNT}>Edit Profile</MDBDropdownItem>\n                                    <MDBDropdownItem href=\"#!\">Logout</MDBDropdownItem>\n                                </MDBDropdownMenu>\n                            </MDBDropdown>\n                        </MDBNavItem>\n                    </MDBNavbarNav>\n                    <MDBNavbarNav right>\n\n                    </MDBNavbarNav>\n                </MDBCollapse>\n            </MDBNavbar>\n        );\n\n    }\n}\n\nexport default observer(Header);\n","import React from \"react\";\nimport { MDBContainer, MDBFooter} from \"mdbreact\";\n\nconst Footer = () => {\n    return (\n        <MDBFooter color=\"blue\" className=\"font-small mt-lg-5\">\n                <MDBContainer fluid className=\"footer-copyright text-center py-3\">\n                    &copy; {new Date().getFullYear()} Copyright: <a href=\"https://aralovelace.dev\"> aralovelace.dev </a>\n                </MDBContainer>\n\n        </MDBFooter>\n\n    );\n\n}\n\nexport default Footer;\n\n\n\n\n","import React, {Component} from \"react\";\nimport {MDBBtn, MDBCol, MDBContainer, MDBInput, MDBRow} from \"mdbreact\";\n\nclass LoginPage extends Component {\n\n    state = {\n        email: \"\",\n        password: \"\"\n    };\n\n    submitHandler = event => {\n        event.preventDefault();\n        event.target.className += \" was-validated\";\n    };\n\n    changeHandler = event => {\n        this.setState({ [event.target.name]: event.target.value });\n    };\n\n\n    render(){\n        return (\n            <MDBContainer className=\"mt-5\">\n                <MDBRow>\n                    <MDBCol md=\"6\">\n                        <form>\n                            <p className=\"h3 text-center mb-4\">Login</p>\n                            <div className=\"grey-text\">\n                                <MDBInput\n                                    label=\"Type your email\"\n                                    icon=\"envelope\" group\n                                    type=\"email\"\n                                    validate error=\"wrong\"\n                                    success=\"right\"\n                                    required\n                                />\n                                <MDBInput\n                                    label=\"Type your password\"\n                                    icon=\"lock\"\n                                    group type=\"password\"\n                                    validate\n                                    required\n                                />\n                            </div>\n                            <div className=\"text-center\">\n                                <MDBBtn color=\"primary\" type=\"submit\">Login</MDBBtn>\n                            </div>\n                        </form>\n                    </MDBCol>\n                </MDBRow>\n            </MDBContainer>\n\n        );\n    }\n\n\n}\n\nexport default LoginPage;","import React, {Component} from \"react\";\nimport {MDBContainer} from \"mdbreact\";\n\n\nclass AccountPage extends Component {\n\n    render() {\n\n        return(\n            <MDBContainer className=\"mt-5\">\n                <p className=\"h3 text-center mb-4\">Account Page</p>\n            </MDBContainer>\n        );\n    }\n\n}\n\nexport default AccountPage;","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Route  } from 'react-router-dom';\nimport RegisterPage from \"./Components/User/Register\";\nimport * as ROUTES from './Components/Constants/routes'\nimport Dashboard from \"./Components/Dashboard\";\nimport {MDBContainer} from \"mdbreact\";\nimport Header from \"./Components/Common/Header\";\nimport Footer from \"./Components/Common/Footer\";\nimport LoginPage from \"./Components/User/Login\";\nimport AccountPage from \"./Components/User/AccountPage\";\n\n\n\n\n\n\nclass App extends Component {\n\n\n\n    render() {\n\n        return (\n        <MDBContainer fluid>\n        <Router>\n            <Header />\n            <Route exact path={ROUTES.DASHBOARD} component={Dashboard} />\n            <Route path={ROUTES.REGISTER} component={RegisterPage} />\n            <Route path={ROUTES.LOGIN} component={LoginPage} />\n            <Route path={ROUTES.ACCOUNT} component={AccountPage} />\n        </Router>\n            <Footer />\n        </MDBContainer>\n\n\n    );\n}\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n"," import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\nimport \"mdbreact/dist/css/mdb.css\";\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}